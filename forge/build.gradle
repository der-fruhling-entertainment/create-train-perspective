plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
//    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
//        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "create_train_perspective.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modImplementation("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    modImplementation "com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}"
    modImplementation "com.tterrag.registrate:Registrate:${registrate_version}"

    modApi("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.3.6"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand(
                "mod_version": project.version,
                "mod_id": rootProject.mod_id
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "create-train-perspective"
    versionName = "Create: Train Perspective v${mod_version} (Forge/NeoForge 1.19.2)"
    versionNumber = "${mod_version}+forge-1.19.2"
    versionType = modrinth_version_type
    uploadFile = remapJar
    additionalFiles = [sourcesJar]
    gameVersions = [minecraft_version]
    loaders = ["forge", "neoforge"]
    changelog = rootProject.file("changelog.md").getText()
    syncBodyFrom = rootProject.file("README.md").text

    dependencies {
        required.project 'create'
        required.project 'architectury-api'
        required.project 'cloth-config'
    }
}
